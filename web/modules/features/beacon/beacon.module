<?php

/**
 * @file
 * Core module for the Beacon platform.
 */

use Drupal\beacon\Entity\ChannelInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Cache\Cache;
use Drupal\Core\Cache\CacheBackendInterface;
use Drupal\Core\Database\Query\AlterableInterface;

/**
 * Implements hook_cron().
 */
function beacon_cron() {
  //Load config file (settings of deleted events)
  $config = \Drupal::config('beacon_ui.settings');
  $quantity = $config->get('settingsServer.quantity');

  // Load event storage.
  $event_storage = \Drupal::entityTypeManager()
    ->getStorage('event');

  // Find up to 100 expired events.
  $event_ids = $event_storage
    ->getQuery()
    ->condition('expire', REQUEST_TIME, '<')
    ->addTag('access_bypass')
    // TODO: Constant or setting?
    ->range(0, $quantity)
    ->execute();

  // Check for event IDs.
  if ($event_ids) {
    // Load and delete the events.
    $event_storage->delete($event_storage->loadMultiple($event_ids));
  }
}

/**
 * Implements hook_entity_base_field_info().
 */
function beacon_entity_base_field_info(EntityTypeInterface $entity_type) {
  // Check if this is the user entity type.
  if ($entity_type->id() === 'user') {
    // Add a field to store the real name.
    $fields['real_name'] = BaseFieldDefinition::create('string')
      ->setLabel(t('Name'))
      ->setDescription(t('Provide your name.'))
      ->setRequired(TRUE)
      ->setSettings([
        'max_length' => 255,
        'text_processing' => 0,
      ])
      ->setDefaultValue('')
      ->setDisplayOptions('form', [
        'type' => 'string_textfield',
        'weight' => -20,
      ])
      ->setDisplayConfigurable('form', TRUE);

    return $fields;
  }
}

/**
 * Implements hook_entity_predelete().
 */
function beacon_entity_predelete($entity) {
  // Extract the entity type.
  $type = $entity->getEntityTypeId();

  // Check the entity type.
  switch ($type) {
    case 'user':
      // Delete this user's channels.
      beacon_entity_delete_by_field_value('channel', 'user_id', $entity->id());
      break;

    case 'channel':
      // Delete this channel's alerts.
      beacon_entity_delete_by_field_value('alert', 'channel', $entity->id());
      break;
  }
}

/**
 * Implements hook_query_TAG_alter().
 */
function beacon_query_channel_access_alter(AlterableInterface $query) {
  // Add access control.
  _beacon_entity_query_access_alert($query, 'channel');
}

/**
 * Implements hook_query_TAG_alter().
 */
function beacon_query_event_access_alter(AlterableInterface $query) {
  // Add access control.
  _beacon_entity_query_access_alert($query, 'event');
}

/**
 * Implements hook_query_TAG_alter().
 */
function beacon_query_alert_access_alter(AlterableInterface $query) {
  // Add access control.
  _beacon_entity_query_access_alert($query, 'alert');
}

/**
 * Implements hook_mail().
 */
function beacon_mail($key, &$message, $params) {
  switch ($key) {
    // Alert.
    case 'alert':
      $message['subject'] = $params['subject'];
      $message['body'] = $params['body'];

      // Check for a "from" address override.
      if ($from = \Drupal::config('beacon.settings')->get('alert_email_from')) {
        $message['from'] = $from;
      }
      break;
  }
}

/**
 * Implements hook_theme().
 */
function beacon_theme($existing, $type, $theme, $path) {
  $items = [];

  // Add functions for each entity type.
  foreach (beacon_entity_types() as $type) {
    $items[$type] = [
      'render element' => 'elements',
      'file' => "{$type}.page.inc",
    ];
  }

  $items['chartjs'] = [
    'template'  => 'chartjs',
    'variables' => [
      'id' => NULL,
      'config' => NULL,
    ],
    'path' => $path . '/templates',
  ];

  return $items;
}

/**
 * Template preprocess hook for chartjs charts.
 */
function template_preprocess_chartjs(&$variables) {
  // Attach the chartjs library.
  $variables['#attached']['library'] = 'beacon/chartjs';

  // Add the ID and config to the JS settings.
  $variables['#attached']['drupalSettings']['chartJs'][$variables['id']] = $variables['config'];
}

/**
 * Get a list of beacon entity type IDs.
 *
 * @return array
 *   An array of beacon entity type IDs.
 */
function beacon_entity_types() {
  return [
    'channel',
    'event',
    'alert',
  ];
}

/**
 * Helper function to delete entities of a given type based on a field value.
 *
 * @param string $entity_type_id
 *   The entity type ID of the entities to delete.
 * @param string $field_name
 *   The name of the field to query on.
 * @param mixed $field_value
 *   The value of the field to filter by.
 */
function beacon_entity_delete_by_field_value(string $entity_type_id, string $field_name, $field_value) {
  // Load entity storage.
  $storage = \Drupal::entityTypeManager()
    ->getStorage($entity_type_id);

  // Query to find entities to delete.
  $ids = $storage
    ->getQuery()
    ->addTag('access_bypass')
    ->condition($field_name, $field_value)
    ->execute();

  // Check for entity IDs.
  if ($ids) {
    // Load and delete the entities.
    $storage->delete($storage->loadMultiple($ids));
  }
}

/**
 * Add access control to an entity query.
 *
 * If the user is not an admin of the entity, only entities that they own
 * will be returned, unless it's an entity reference query, in which case
 * admin permissions are ignored.
 *
 * @param \Drupal\Core\Database\Query\AlterableInterface $query
 *   The query to alter for access control.
 * @param string $entity_type_id
 *   The entity type to add access for. This can usually be extract from the
 *   query metadata but there is no guarantee.
 *
 * @see hook_query_TAG_alter()
 */
function _beacon_entity_query_access_alert(AlterableInterface $query, string $entity_type_id) {
  $filter = FALSE;

  // Get the current user.
  $user = \Drupal::currentUser();

  // Check if the query should bypass access.
  // This is useful for queries done by cron, hooks, etc.
  if ($query->hasTag('access_bypass')) {
    $filter = FALSE;
  }
  // Check if this is an entity reference query.
  elseif ($query->hasTag('entity_reference')) {
    $filter = TRUE;
  }
  else {
    // Get the entity admin permission.
    $permission = \Drupal::entityTypeManager()
      ->getDefinition($entity_type_id)
      ->getAdminPermission();

    // Check if the user does not have the permission.
    if (!$user->hasPermission($permission)) {
      $filter = TRUE;
    }
  }

  // Check if we should filter.
  if ($filter) {
    // Get the query tables.
    $tables = $query->getTables();

    // Determine the alias.
    $alias = isset($tables[$entity_type_id]) ? $tables[$entity_type_id]['alias'] : $tables['base_table']['alias'];

    // Generate the field to filter on.
    $field = $alias . '.user_id';

    // Iterate the existing conditions.
    foreach ($query->conditions() as $condition) {
      if (is_array($condition)) {
        // Check if the user filter condition already exists.
        if (($condition['field'] == $field) &&
          ($condition['value'] == $user->id()) &&
          ($condition['operator'] == '=')) {
          // No need to filter any more.
          $filter = FALSE;
          break;
        }
      }
    }

    // Filter for entities that this user owns, if needed.
    if ($filter) {
      $query->condition($alias . '.user_id', $user->id());
    }
  }
}

/**
 * Get a list of the channels events belonging to a given user.
 *
 * @param int $user_id
 *   The user entity ID, or NULL to use the current user.
 *
 * @return array
 *   An array of channel labels keyed by entity ID.
 */
function beacon_get_user_channels(int $user_id = NULL) {
  // Get the current user ID, if needed.
  $user_id = $user_id ? $user_id : \Drupal::currentUser()->id();

  // Generate a cache ID.
  $cache_id = "user_channels:{$user_id}";

  // Load the cache.
  $cache = \Drupal::cache();

  // Check the cache for data.
  if ($data = $cache->get($cache_id)) {
    // Extract the cached data.
    return $data->data;
  }

  // Find all of the channels belonging to the user.
  $query = \Drupal::database()->select('channel')
    ->fields('channel', ['id', 'name'])
    ->condition('user_id', $user_id)
    ->orderBy('name');

  // Execute the query.
  $channels = $query->execute()->fetchAllKeyed();

  // Cache the types.
  $cache->set($cache_id, $channels, CacheBackendInterface::CACHE_PERMANENT, ["user.channels:{$user_id}"]);

  return $channels;
}

/**
 * Get a list of the event types for the events belonging to a given user.
 *
 * @param int $user_id
 *   The user entity ID, or NULL to use the current user.
 * @param bool $merge
 *   TRUE if the types should be merged across all channels, otherwise FALSE.
 *   Defaults to FALSE.
 *
 * @return array
 *   An array of event type strings.
 */
function beacon_get_user_event_types(int $user_id = NULL, $merge = FALSE) {
  // Get the current user ID, if needed.
  $user_id = $user_id ? $user_id : \Drupal::currentUser()->id();

  // Generate a cache ID.
  $cache_id = "user_event_types:{$user_id}";

  // Load the cache.
  $cache = \Drupal::cache();

  // Check the cache for data.
  if ($data = $cache->get($cache_id)) {
    // Extract the cached data.
    $types = $data->data;
  }
  else {
    $types = [];

    // Find all of the event types belonging to the user.
    $query = \Drupal::database()->select('event')
      ->fields('event', ['type', 'channel'])
      ->condition('user_id', $user_id)
      ->groupBy('type')
      ->groupBy('channel')
      ->orderBy('type');

    // Execute the query.
    $results = $query->execute()->fetchAll();

    // Iterate the results.
    foreach ($results as $result) {
      // Group by channel.
      $types[$result->channel][$result->type] = $result->type;
    }

    // Cache the types.
    $cache->set($cache_id, $types, CacheBackendInterface::CACHE_PERMANENT, ["user.events:{$user_id}"]);
  }

  // Check if we should merge.
  if ($merge) {
    $merged = [];
    foreach ($types as $channel => $values) {
      foreach ($values as $value) {
        $merged[$value] = $value;
      }
    }
    $types = $merged;

    // Sort by key.
    ksort($types);
  }

  return $types;
}

/**
 * Get a list of the event types for the events within a given channel.
 *
 * @param \Drupal\beacon\Entity\ChannelInterface $channel
 *   The channel entity.
 *
 * @return array
 *   An array of event type strings.
 */
function beacon_get_channel_event_types(ChannelInterface $channel) {
  // Get event types for the user that owns this channel.
  $types = beacon_get_user_event_types($channel->getOwnerId());

  // Return the types just for this channel.
  return isset($types[$channel->id()]) ? $types[$channel->id()] : [];
}
